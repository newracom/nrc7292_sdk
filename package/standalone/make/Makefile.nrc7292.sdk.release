LINKOPT = lib

#//--------------------------------------------------
#// TARGET
#//--------------------------------------------------
TARGET=standalone_xip

ifneq ($(APP_NAME),)
BUILD_NAME = $(APP_NAME)
else
BUILD_NAME = standalone
endif

#//--------------------------------------------------
#// CONFIG
#//--------------------------------------------------
# S1G HOOK for 11ah
CONFIG_S1G_HOOK=y

# Background Scan
CONFIG_BG_SCAN=y

# Modem Recovery
CONFIG_MODEM_RECOVERY=y

# RF TX CALIBRATION
CONFIG_APPLY_TX_GAIN_1_5_WITH_TXLO_TXIMG_CAL=y

# Temp sensor
CONFIG_USE_TEMP_SENSOR=y

# SW-based Encryption for PMF //only for Standalone
CONFIG_PMF_SWENC=n

# SW OFFLOAD for NDP CTRL (NDP_ACK/NDP_BA/NDP_CTS)
CONFIG_SW_OFFLOAD_NDP_CTRL=y

# Board data
CONFIG_BD=y

# Power Save - Non PS-Poll
CONFIG_PS_NONPOLL=y

# SET WIM command via task(Work Queue)
CONFIG_SET_WIM_BY_WQ=n

# TX Frame via task(Work Queue)
CONFIG_DL_TRANSMIT_BY_WQ=n

# TASK RENEW
CONFIG_NEW_TASK_ARCH=y

# Avoid FragAttack
CONFIG_AVOID_FRAG_ATTACK=n

# Fragmentation on target to support low MCS
# Disable until SAM FW support assemble of fragmented frame
CONFIG_DYNAMIC_FRAG=y

# Support defragmentation at lmac for both HM & SAM mode
CONFIG_DEFRAG=y

# Support Multi STA Rate Control
CONFIG_MULTI_STA_RC=y

# WATCHDOG TIMER
ifeq ($(CONFIG_NEW_TASK_ARCH),y)
CONFIG_WDT=y
endif

# CLI Support (y: Support n: Not Support)
CONFIG_CLI=y
ifeq ($(CONFIG_CLI),y)
# Support Minimum CLI (y: Support minimum-set of CLIs used by cli_app n: Support all)
CONFIG_CLI_MINIMUM=y
endif

# DEBUG (DEBUG, TRACKER, Statistics, etc.)
CONFIG_DEBUG=n

# PRINT Console LOG
CONFIG_LOG=n

# USE CENTER LO for 1M BW
CONFIG_1MBW_CENTER_LO=y

# Use KR Wireless MIC detection for KR-MIC Band
CONFIG_KR_MIC_SCAN=y

# (only for CM3) USE PRIMASK-based INT Lock (y:PRIMASK, n:BASEPRI)
CONFIG_PRIMASK_INT_LOCK=n

# STA-Role ONLY
CONFIG_ONLY_STA=n

ifeq ($(CONFIG_ONLY_STA),n)
# only for AP
# Gather STA's SIGNAL INFO (RSSI,SNR,MCS) on AP
CONFIG_STA_SIG_INFO=y
# Probe Response Offloading
CONFIG_UMAC_PRESP=y
endif

# When Dynamic Frag is on, need to gather STA's RSSI info.
ifeq ($(CONFIG_DYNAMIC_FRAG),y)
CONFIG_STA_SIG_INFO=y
endif

# USE SMALL MEMORY for pool and heap
CONFIG_USE_SMALL_MEM=n

# major lmac/umac codes are run on RAM
ifneq ($(findstring norunram, $(ALIAS)), )
CONFIG_RUNRAM=n
else
CONFIG_RUNRAM=y
endif

# Measurement Airtime
CONFIG_MEASURE_AIRTIME=n

# PowerSave Debug Mode w/always on memory
CONFIG_PS_DEBUG_ALWAYSONMEM=n

# For use of Authentication control
CONFIG_AUTH_CONTROL=y

# For use of broadcast fota in STA side
CONFIG_BCAST_FOTA_STA=y

# Ucode
CONFIG_UCODE=y
# Power-Save HOOK for deep sleep //only for Standalone
CONFIG_WPS_PS_HOOK=y

# GDMA COPY for Data & BSS
CONFIG_DMA_COPY=y

# RF ON/OFF for airplane mode or idle period on STA
CONFIG_RF_KILL=n

# RSN EXT Support
CONFIG_RSN_EXTENTION=y

# Support Channel Switch Annoucement on STA
CONFIG_STA_CSA_SUPPORT=y

# Support Scanning mode
CONFIG_SCAN_MODE=y

# TWT
CONFIG_TWT=y

# RELEASE FW
CONFIG_CLI=n
CONFIG_CLI_MINIMUM=n
CONFIG_DEBUG=n
CONFIG_LOG=n

# Duty Cycle
CONFIG_DUTYCYCLE=y

# Auto triggering to create Tx aggregation session.
CONFIG_AMPDU_AUTO_TX=y

# AMPDU reordering(draft version : need to tune more)
CONFIG_AMPDU_REORDER=n

# Use new printf 
CONFIG_NEW_V_SNPRINTF_SUPPORT=n

# Remote command (via vendor specific IE) feature
CONFIG_REMOTECMD=n

# RTC Always On
CONFIG_RTC_ALWAYS_ON=y

# RTC Dynamic PS timeout
CONFIG_RTC_DYNAMIC_PS=y

# Scan Debugging (temporary configuration)
CONFIG_SCAN_DEBUG=n

# SoftAP OWE support
CONFIG_SOFTAP_OWE=y

# SDK wifi console command
CONFIG_CLI_API_WIFI=n

# Schedule Callbacks after deep sleep (nonTIM without connection)
CONFIG_PS_SCHEDULE=y

# Legacy ACK feature
CONFIG_LEGACY_ACK=y

# Support for beacon bypass feature
CONFIG_BEACON_BYPASS=n

# Set # of max MPDU in AMPDU by manual (not reset after reconnect)
CONFIG_MANUAL_AGG_NUM=y

# TSF Sync by Vendor IE
CONFIG_TSF_SYNC_VENDOR_IE=y

# TSF Sync by probe req
CONFIG_TSF_SYNC_PROBE_REQ=y

# Support Modem Sleep (on/off BB during PS)
CONFIG_MODEM_SLEEP=n

# Serial Flash Deep power down mode
CONFIG_SFLASH_DP=n

# (AP only) AP sends 1/2/4M BW probe response according to BW of probe request
CONFIG_MATCH_OP_BW_PREQ_PRSP=y
ifeq ($(CONFIG_ONLY_STA),y)
CONFIG_MATCH_OP_BW_PREQ_PRSP=n
endif

# Operation with 8MHz Bandwidth AP
CONFIG_STA_SUPPORT_8M=y

# Do RF Recovery when detecting continuous beacon loss
CONFIG_RF_RECOVERY_BY_BCM=n

# Manual Continuous Tx support
CONFIG_MANUAL_CONT_TX_SUPPORT=y

# Short GI is adaptively activated by Rate Control
CONFIG_ADAPTIVE_GI=y

#// --------------------------------------------------
#// Flash Memory size
#// --------------------------------------------------
# Set the default flash size
CONFIG_DEFAULT_FLASH_SIZE = 2M

# Convert ALIAS to lowercase for case-insensitive matching
ALIAS_LOWER := $(shell echo $(ALIAS) | tr '[:upper:]' '[:lower:]')

ifneq ($(findstring 4m, $(ALIAS_LOWER)), )
CONFIG_FLASH_SIZE = 4M
else ifneq ($(findstring 2m, $(ALIAS_LOWER)), )
CONFIG_FLASH_SIZE = 2M
else
CONFIG_FLASH_SIZE = $(CONFIG_DEFAULT_FLASH_SIZE)
endif

#// --------------------------------------------------
#// Flash MAP Profile
#// --------------------------------------------------
# Extend Flash size to maximize code/data region (only for 2MB Flash)
# factory :  916KB (FOTA/100KB_USER_DATA)
# profile1:  968KB (FOTA/8KB_USER_DATA)
# profile2:  972KB (FOTA/NO_USER_DATA)
# profile3: 1936KB (NO_FOTA/8KB_USER_DATA)
# profile4: 1944KB (NO_FOTA/NO_USER_DATA)
CONFIG_FLASH_PROFILE=profile1

#// --------------------------------------------------
#// 3rd party library
#// --------------------------------------------------
CONFIG_WPA_SUPP_CRYPTO = mbedtls

CONFIG_FREERTOS	= y
CONFIG_LWIP	= y
CONFIG_MBEDTLS	= y
CONFIG_WPA_SUPP	= y
ifeq ($(CONFIG_ONLY_STA),y)
CONFIG_SOFT_AP	=	n
else
CONFIG_SOFT_AP	=	y
endif

ifneq ($(findstring ipv6, $(ALIAS)), )
# Support IPV6
CONFIG_IPV6=y
else
CONFIG_IPV6=n
endif

#// --------------------------------------------------
#// APP Core
#// --------------------------------------------------
SDK_DIR 	=  sdk
SDK_INC	= $(SDK_DIR)/include
SDK_APPS	= $(SDK_DIR)/apps
SDK_WIFI_COMMON = $(SDK_APPS)/wifi_common

ifneq ($(findstring ATCMD,$(APP_NAME)),ATCMD)
PROJECT_FOLDER = $(APP_NAME)
else
PROJECT_FOLDER = atcmd
endif

SDK_PROJECT = $(SDK_APPS)/$(PROJECT_FOLDER)

INCLUDE	+= -I$(SDK_INC)
INCLUDE += -I$(SDK_WIFI_COMMON)
INCLUDE += -I$(SDK_PROJECT)

VPATH += $(SDK_INC):$(SDK_APPS)
VPATH += $(SDK_PROJECT):$(SDK_WIFI_COMMON)

ifneq ($(APP_NAME),)
include $(SDK_PROJECT)/.config
include $(SDK_PROJECT)/Makefile
endif

#// --------------------------------------------------
#// Alias Generated From system_info
#// --------------------------------------------------
TOP					=	.
SYSTEM				=	nrc7292
STANDARD			=	11ah
ifneq ($(findstring cm0, $(ALIAS)), )
CPU				=	ARM_CM0
DEFINE				+=	-DCPU_CM0
else
CPU				=	ARM_CM3
DEFINE				+=	-DCPU_CM3
endif

PREFIX				=	arm-none-eabi-

DEFINE				+=	-DNRC7292
DEFINE				+=	-DINCLUDE_STANDALONE
DEFINE				+=	-DNRC7292_STANDALONE_XIP
DEFINE				+=	-DCACHE_XIP
DEFINE				+=	-DSF_WRITABLE
DEFINE				+=	-DSDK_SYSTEM_NAME=\"$(SYSTEM)\"
DEFINE				+=	-DSDK_TARGET_NAME=\"$(TARGET)\"
OUTPUT				=	$(SYSTEM)_$(TARGET)_$(APP_NAME)_$(CONFIG_FLASH_SIZE)

#// -------------------------------------------------
#// 11AH Features (common)
#// --------------------------------------------------
DEFINE				+=	-DSTANDARD_11AH
DEFINE				+=	-DLMAC_CONFIG_11AH=1
DEFINE				+=	-DINCLUDE_UMAC
DEFINE				+=	-DINCLUDE_TIM_HANDLER
DEFINE				+=	-DINCLUDE_CDC
DEFINE				+=	-DUMAC_BEACON_MONITOR
#DEFINE				+=	-DINCLUDE_PV1
#DEFINE				+=	-DNRC_NDP_PV1_SUPPORT

#//-------------------------------------------------
#// AP Features
#//--------------------------------------------------
ifeq ($(CONFIG_ONLY_STA),n)
DEFINE				+=	-DINCLUDE_ACCESS_POINT
DEFINE				+=	-DINCLUDE_UMAC_BEACON
DEFINE                          +=      -DINCLUDE_BEACON_AP_BEACON
#DEFINE                          +=      -DINCLUDE_BEACON_BCMC
DEFINE				+=	-DMAX_STA=50
else
DEFINE				+=	-DMAX_STA=1
endif

#//-------------------------------------------------
#// Rate Control
#//--------------------------------------------------
DEFINE				+=	-DRC_START_MIN
DEFINE				+=	-DRC_MCS_SINGLE

#//-------------------------------------------------
#// RF
#//--------------------------------------------------
DEFINE				+=	-DNRF_NO_USE_SPI

#//-------------------------------------------------
#// LOG
#//--------------------------------------------------
ifeq ($(CONFIG_LOG),y)
DEFINE				+=	-DINCLUDE_TRACE_VERBOSE
DEFINE				+=	-DINCLUDE_TRACE_INFO
DEFINE				+=	-DINCLUDE_TRACE_ERROR
DEFINE				+=	-DINCLUDE_TRACE_ALWAYS
DEFINE				+=	-DINCLUDE_TRACE_ASSERT
DEFINE				+=	-DINCLUDE_TRACE_WAKEUP
else
DEFINE				+=	-DINCLUDE_TRACE_ERROR
DEFINE				+=	-DINCLUDE_TRACE_ASSERT
DEFINE				+=	-DINCLUDE_TRACE_ALWAYS
endif
#//-------------------------------------------------
#// CLI
#//--------------------------------------------------
ifeq ($(CONFIG_CLI),y)
DEFINE				+=	-DINCLUDE_USE_CLI
endif

#//-------------------------------------------------
#// Debug (CLI,TRACKER,STATISTICS)
#//--------------------------------------------------
ifeq ($(CONFIG_DEBUG),y)
DEFINE				+=	-DINCLUDE_LMAC_DEBUG
DEFINE				+=	-DINCLUDE_RF_DEBUG
DEFINE				+=	-DINCLUDE_PHY_DEBUG
DEFINE				+=	-DINCLUDE_BUF_TRACKER
DEFINE				+=	-DINCLUDE_EVENT_TRACKER
DEFINE				+=	-DDEBUG_MAC_STATS
else
#DEFINE				+=	-DINCLUDE_LMAC_DEBUG
DEFINE				+=	-DDEBUG_MAC_STATS
endif
DEFINE				+=	-DUTIL_TRACE_STACK

#//-------------------------------------------------
#// Configuration
#//--------------------------------------------------
DEFINE 				+=	-DLMAC_CONFIG_FREERTOS=1
DEFINE				+=	-DLMAC_CONFIG_NAN=0
DEFINE				+=	-DLMAC_CONFIG_BUFFER_SIZE=512
ifeq ($(CONFIG_USE_SMALL_MEM),y)
# 32KB Pool
DEFINE				+=	-DLMAC_CONFIG_DL_DESCRIPTOR=16
DEFINE 				+=	-DLMAC_CONFIG_POOL_0_RESERVED_NUM=4
DEFINE 				+=	-DLMAC_CONFIG_POOL_0_NUM=32
DEFINE 				+=	-DLMAC_CONFIG_POOL_1_NUM=32
else
# 40.5KB Pool
DEFINE				+=	-DLMAC_CONFIG_DL_DESCRIPTOR=32
DEFINE 				+=	-DLMAC_CONFIG_POOL_0_RESERVED_NUM=4
ifeq ($(CONFIG_DEFRAG),y)
DEFINE 				+=	-DLMAC_CONFIG_POOL_0_NUM=55
else
DEFINE 				+=	-DLMAC_CONFIG_POOL_0_NUM=45
endif
DEFINE 				+=	-DLMAC_CONFIG_POOL_1_NUM=36
endif

DEFINE 				+=	-DLMAC_CONFIG_CREDIT_QM0=8
DEFINE 				+=	-DLMAC_CONFIG_CREDIT_QM1=8
DEFINE 				+=	-DLMAC_CONFIG_CREDIT_QM2=8
DEFINE 				+=	-DLMAC_CONFIG_CREDIT_QM3=9

ifeq ($(CONFIG_AUTH_CONTROL),y)
DEFINE				+=	-DLMAC_MODEM_RECOVERY_TIME_MS=120000
else
DEFINE				+=	-DLMAC_MODEM_RECOVERY_TIME_MS=10000
endif
DEFINE				+=	-DLMAC_WDT_RESET_TIME_MS=20000
DEFINE				+=	-DLMAC_BMT_LOSS_CNT=30

#// --------------------------------------------------
#// Common Tool
#// --------------------------------------------------
CC					=	$(PREFIX)g++
AS					=	$(PREFIX)g++
AR					=	$(PREFIX)ar
CP					=	$(PREFIX)objcopy
OD					=	$(PREFIX)objdump
SZ					=	$(PREFIX)size
NM					=	$(PREFIX)nm
ST					=	$(PREFIX)strip
READELF				=	$(PREFIX)readelf

#// --------------------------------------------------
#// Common Path
#// --------------------------------------------------
OUT_PATH			=	out/$(SYSTEM)/$(TARGET)/$(BUILD_NAME)
OBJ_PATH			=	$(OUT_PATH)/objs

LIB_PATH			=	lib
LIB_MODEM_PATH		=	$(LIB_PATH)/modem
LIB_MODEM_INC_PATH		=	$(LIB_MODEM_PATH)/inc
LIB_MODEM_SRC_PATH		=	$(LIB_MODEM_PATH)/src

LIB_MODEM_SYSTEM_INC_PATH			=	$(LIB_MODEM_INC_PATH)/system
LIB_MODEM_WLAN_INC_PATH			=	$(LIB_MODEM_INC_PATH)/wlan
LIB_MODEM_HAL_INC_PATH			=	$(LIB_MODEM_INC_PATH)/hal
LIB_MODEM_HOST_INC_PATH			=	$(LIB_MODEM_INC_PATH)/host
LIB_MODEM_UTIL_INC_PATH			=	$(LIB_MODEM_INC_PATH)/util
LIB_MODEM_UMAC_INC_PATH			=	$(LIB_MODEM_INC_PATH)/umac

#// BDF_PATH
BDF_PATH	=	bdf
INCLUDE += -I$(BDF_PATH)
VPATH	+= $(BDF_PATH)

#// --------------------------------------------------
#// Include Path
#// --------------------------------------------------
INCLUDE += -I$(LIB_MODEM_PATH)
INCLUDE	+= -I$(LIB_MODEM_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_SYSTEM_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_WLAN_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_HAL_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_HOST_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_UTIL_INC_PATH)
INCLUDE	+= -I$(LIB_MODEM_UMAC_INC_PATH)


include make/configure-in.os

#// --------------------------------------------------
#// Specific LD File
#// --------------------------------------------------
LD_CM_FILE_NAME_RUNRAM = cmx_common_runram.ld
LD_FILE_NAME_RUNRAM = cmx_single_huge_7292.ld
LD_CM_FILE_NAME_NORMAL = cmx_common.ld
LD_FILE_NAME_NORMAL = cmx_single_huge_7291s1.ld

ifeq ($(CONFIG_RUNRAM), y)
LD_CM_FILE_NAME		=	$(LD_CM_FILE_NAME_RUNRAM)
LD_FILE_NAME		=	$(LD_FILE_NAME_RUNRAM)
else
LD_CM_FILE_NAME	= $(LD_CM_FILE_NAME_NORMAL)
LD_FILE_NAME		= $(LD_FILE_NAME_NORMAL)
endif
LD_CM_FILE		=	$(LIB_MODEM_PATH)/$(LD_CM_FILE_NAME)
LD_FILE			=	$(LIB_MODEM_PATH)/$(LD_FILE_NAME)

include make/configure-in.flash

#// --------------------------------------------------
#// Source Files
#// --------------------------------------------------
VPATH	+= $(LIB_MODEM_SRC_PATH)
CSRCS   += standalone.c
CSRCS	+= bdf_api.c

#// --------------------------------------------------
#// System/Target Dependent Define
#// --------------------------------------------------
# PRO_FPGA : 2STA platform and no RF
DEFINE	+= -DCONFIG_OS_FREERTOS
DEFINE	+= -DPRO_FPGA
ifeq ($(CONFIG_USE_SMALL_MEM),y)
DEFINE	+= -DconfigTOTAL_HEAP_SIZE=60000
else
ifeq ($(CONFIG_IPV6),y)
DEFINE	+= -DconfigTOTAL_HEAP_SIZE=190000
else
DEFINE	+= -DconfigTOTAL_HEAP_SIZE=240000
endif #ipv6
endif #small ram

#// --------------------------------------------------
#// Build Information
#// --------------------------------------------------
PWD := $(shell pwd)
UNAME := "$(shell uname -a)"
TIMEFMT := --format="- %e Seconds"

#// --------------------------------------------------

#// --------------------------------------------------
#// Build Flag
#// --------------------------------------------------
ifneq ($(findstring cm0, $(ALIAS)), )
ARCH_FLAGS      = -mcpu=cortex-m0 -mthumb
else
ARCH_FLAGS	= -mcpu=cortex-m3 -mthumb
endif
SYS_FLAGS	= --specs=nosys.specs

CPPFLAGS = --std=gnu++1y -Wno-literal-suffix -fpermissive -fno-rtti

CFLAGS 	+= -x none -Werror -Wall -Wno-unused-value -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-function
CFLAGS	+= -Wno-address-of-packed-member
CFLAGS	+= -fno-common -fno-exceptions -gdwarf-2 -ffunction-sections -fdata-sections
CFLAGS	+= -Os
CFLAGS	+= $(INCLUDE) $(ARCH_FLAGS) $(DEFINE)

LFLAGS	= -nostartfiles -Wl,--gc-sections
LFLAGS	+= $(ARCH_FLAGS) $(SYS_FLAGS)
LFLAGS	+= -L$(LIB_PATH) -Os -Wl,-Map=$(OUT_PATH)/$(OUTPUT).map
LFLAGS	+= -gdwarf-2
LFLAGS	+= -T$(LD_FILE)

CPFLAGS	= -O binary
ODFLAGS = -S -C --demangle
ASFLAGS	=
NMFLAGS	= -S --demangle --size-sort -s -r

#// --------------------------------------------------
#// Others
#//--------------------------------------------------
include make/Makefile.feature
include make/Makefile.feature.lib
include make/Makefile.common
